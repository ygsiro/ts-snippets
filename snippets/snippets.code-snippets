{
  "allow function": {
    "scope": "typescript",
    "prefix": "alw",
    "body": [
      "const ${1:func_name} = (${2:args}): ${3:type} => {",
      "  ${3/void|any|(.+)/${1:+return }/}${0:;}",
      "};"
    ],
    "description": "allow function"
  },
  "simple allow function":{
    "scope": "typescript",
    "prefix": "alw:s",
    "body": "const ${1:func_name} = (${2:args}) => ${3:expression};"
  },
  "try catch finally":{
    "scope": "typescript",
    "prefix": "fin",
    "body": [
      "finally {",
      "  $0",
      "}"
    ],
    "description": "Insert after try-catch statement"
  },
  "function type declaration with function syntax":{
    "scope": "typescript",
    "prefix": "type:f",
    "body": "type ${1:type_name} = (${2:arg}:${3:arg_type}) => ${4:return_type};",
    "description": "function type declaration with function syntax"
  },
  "Function type declaration with method syntax":{
    "scope": "typescript",
    "prefix": "type:m",
    "body": [
      "type ${1:type_name} = {",
      "  (${2:arg}:${3:arg_type}): ${4:return_type};",
      "};"
    ],
    "description": "Function type declaration with method syntax"
  },
  "Function type declaration with Existing Functions":{
    "scope": "typescript",
    "prefix": "type:e",
    "body": "type ${1:type_name} = typeof ${existing_function_name};",
    "description": "Function type declaration with Existing Functions"
  },
  "class":{
    "scope": "typescript",
    "prefix": "cls",
    "body": [
      "class ${1:class_name}{",
      "  constructor(${2:args}){",
      "    $0",
      "  }",
      "}"
    ],
    "description": "typescript class"
  },
  "class extends":{
    "scope": "typescript",
    "prefix": "cls:e",
    "body": [
      "class ${1:class_name} extends ${2:parent_class_name}{",
      "  constructor(${3:args}){",
      "    super();$0",
      "  }",
      "}"
    ],
    "description": "typescript class"
  },
  "abstruct class":{
    "scope": "typescript",
    "prefix": "cls:a",
    "body": [
      "abstruct class ${1:class_name}{",
      "  constructor(${2:args}){",
      "  }",
      "  abstruct ${3:function_name}(): ${4:return_type};",
      "}"
    ],
    "description": "abstruct class"
  },
  "instanceof":{
    "scope": "typescript",
    "prefix": "instanceof",
    "body": "${1:child_class} instanceof ${2:parent_class}",
    "description": "instanceof"
  },
  "interface":{
    "scope": "typescript",
    "prefix": "interface",
    "body": [
      "interface ${1:interface_name}{",
      "  ${2:function_name}(): ${3:return_type};",
      "}"
    ],
    "description": "interface"
  }
}